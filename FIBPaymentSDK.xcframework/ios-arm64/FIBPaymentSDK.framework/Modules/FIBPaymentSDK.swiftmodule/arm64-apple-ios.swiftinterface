// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name FIBPaymentSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import DeveloperToolsSupport
@_exported import FIBPaymentSDK
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum FIBApplicationURLType : Swift.Hashable {
  case personalURL(Swift.String)
  case businessURL(Swift.String)
  case corporateURL(Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FIBPaymentSDK.FIBApplicationURLType : Swift.Equatable {
  public static func == (lhs: FIBPaymentSDK.FIBApplicationURLType, rhs: FIBPaymentSDK.FIBApplicationURLType) -> Swift.Bool
}
public enum PaymentStatusType : Swift.String {
  case paid
  case unpaid
  case canceled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency final public class PayWithFIBView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let button: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override final public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency final public func configure(fibApplicationURLs: [FIBPaymentSDK.FIBApplicationURLType], delegate: (any FIBPaymentSDK.FIBPaymentManagerDelegate)?)
  @_Concurrency.MainActor @preconcurrency final public func checkPaymentStatus(paymentID: Swift.String, completion: @escaping (FIBPaymentSDK.PaymentStatusType?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency final public func cancelPayment(paymentID: Swift.String)
  @objc deinit
}
public enum APIError : Swift.Error {
  case requestError(any Swift.Error)
  case apiResponseError(FIBPaymentSDK.APIResponseError)
  case noData
  case parsingError
}
public struct APIResponseError : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct APIErrorBody : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public protocol FIBPaymentManagerDelegate : AnyObject {
  func paymentCanceled(paymentID: Swift.String)
  func didReceive(error: FIBPaymentSDK.APIError)
}
public protocol FIBPaymentManagerType {
  func openFIB(_ applicationType: FIBPaymentSDK.FIBApplicationURLType)
  func checkPaymentStatus(paymentID: Swift.String, completion: @escaping (FIBPaymentSDK.PaymentStatusType?) -> Swift.Void)
  func cancelPayment(paymentID: Swift.String)
  var delegate: (any FIBPaymentSDK.FIBPaymentManagerDelegate)? { get set }
}
@_hasMissingDesignatedInitializers final public class FIBPaymentManager : FIBPaymentSDK.FIBPaymentManagerType {
  weak final public var delegate: (any FIBPaymentSDK.FIBPaymentManagerDelegate)?
  public init()
  final public func openFIB(_ applicationURLType: FIBPaymentSDK.FIBApplicationURLType)
  final public func checkPaymentStatus(paymentID: Swift.String, completion: @escaping (FIBPaymentSDK.PaymentStatusType?) -> Swift.Void)
  final public func cancelPayment(paymentID: Swift.String)
  @objc deinit
}
extension FIBPaymentSDK.PaymentStatusType : Swift.Equatable {}
extension FIBPaymentSDK.PaymentStatusType : Swift.Hashable {}
extension FIBPaymentSDK.PaymentStatusType : Swift.RawRepresentable {}
